name: Build and Deploy to ECR and Render

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: lastdance-frontend

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate ECR token for Render (temporary)
      run: |
        echo "🔑 ECR Token for Render Credential:"
        aws ecr get-login-password --region ${{ env.AWS_REGION }}
        echo "⬆️ Copy this token to Render Credential settings"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Clean up old images (keep storage under limit)
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "🧹 Checking ECR repository size..."
        
        # Get list of images older than 7 days, keeping latest 3
        OLD_IMAGES=$(aws ecr describe-images \
          --repository-name $ECR_REPOSITORY \
          --region $AWS_REGION \
          --query 'sort_by(imageDetails,& imagePushedAt)[:-3][?imagePushedAt<`'$(date -u -d '7 days ago' +%Y-%m-%dT%H:%M:%S)'`].imageDigest' \
          --output text)
        
        if [ ! -z "$OLD_IMAGES" ]; then
          echo "🗑️ Deleting old images to save storage..."
          for digest in $OLD_IMAGES; do
            aws ecr batch-delete-image \
              --repository-name $ECR_REPOSITORY \
              --region $AWS_REGION \
              --image-ids imageDigest=$digest
          done
          echo "✅ Old images deleted!"
        else
          echo "✅ No old images to delete"
        fi

  deploy-to-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: Deployment status
      run: |
        echo "✅ Deployment triggered successfully!"
        echo "🚀 Image: ${{ needs.build-and-push.outputs.image }}"
        echo "📦 ECR Repository: lastdance-frontend"
        echo "🌍 AWS Region: ${{ env.AWS_REGION }}"
